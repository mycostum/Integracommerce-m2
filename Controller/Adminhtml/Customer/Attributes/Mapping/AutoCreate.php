<?php
/**
 * IntegraCommerce Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  IntegraCommerce
 * @package   Mycostum_IntegraCommerce
 *
 * @copyright Copyright (c) 2018 B2W Digital - IntegraCommerce Platform.
 *
 * Access https://ajuda.integracommerce.com.br/hc/pt-br/requests/new for questions and other requests.
 */

namespace Mycostum\IntegraCommerce\Controller\Adminhtml\Customer\Attributes\Mapping;

use Mycostum\IntegraCommerce\Api\CustomerAttributeMappingRepositoryInterface;
use Mycostum\IntegraCommerce\Api\CustomerAttributeMappingOptionsRepositoryInterface;
use Mycostum\IntegraCommerce\Helper\Context as HelperContext;
use Magento\Backend\App\Action\Context;

class AutoCreate extends AbstractMapping
{
    /** @var CustomerAttributeMappingOptionsRepositoryInterface */
    protected $_customerAttributeMappingOptionsRepository;

    /** @var \Mycostum\IntegraCommerce\Helper\Customer\Customer  */
    protected $_customerHelper;

    /**
     * AbstractMapping constructor.
     *
     * @param Context                                     $context
     * @param HelperContext                               $helperContext
     * @param CustomerAttributeMappingRepositoryInterface $customerAttributeMappingRepository
     */
    public function __construct(
        Context $context,
        HelperContext $helperContext,
        CustomerAttributeMappingRepositoryInterface $customerAttributeMappingRepository,
        CustomerAttributeMappingOptionsRepositoryInterface $customerAttributeMappingOptionsRepository,
        \Mycostum\IntegraCommerce\Helper\Customer\Customer $customerHelper
    )
    {
        parent::__construct($context, $helperContext, $customerAttributeMappingRepository);

        $this->_customerAttributeMappingOptionsRepository = $customerAttributeMappingOptionsRepository;
        $this->_customerHelper = $customerHelper;
    }

    /**
     * @return \Magento\Framework\App\ResponseInterface|\Magento\Framework\Controller\Result\Redirect|\Magento\Framework\Controller\ResultInterface
     *
     * @throws \Exception
     */
    public function execute()
    {
        $mappingId = $this->getRequest()->getParam('id');

        try {
            /** @var Mapping $mapping */
            $mapping = $this->customerAttributeMappingRepository->get($mappingId);
        } catch (\Exception $e) {
            return $this->redirectIndex();
        }

        $attribute = $this->loadCustomerAttribute($mapping->getIntegracommerceCode());

        if ($attribute) {
            $mapping->setAttributeId((int)$attribute->getId());

            $this->messageManager
                ->addWarningMessage(__('There was already an attribute with the code "%1".', $mapping->getIntegracommerceCode()))
                ->addSuccessMessage(__('The attribute was only mapped automatically.'));
        }

        if (!$attribute) {
            $config = [
                'label' => $mapping->getIntegracommerceLabel(),
                'type' => 'varchar',
                'input' => 'text',
                'required' => false,
                'visible' => true,
                'user_defined' => false,
                'position' => 999,
                'system' => 0,
                'note' => sprintf(
                    '%s. %s.',
                    'Created automatically by BSeller IntegraCommerce module',
                    $mapping->getIntegracommerceDescription()
                )
            ];

            $installConfig = (array)$mapping->getAttributeInstallConfig();

            foreach ($installConfig as $configKey => $itemValue) {
                if (is_null($itemValue)) {
                    continue;
                }

                $config[$configKey] = $itemValue;
            }

            if (isset($installConfig['options'])) {
                $options = [];
                foreach ($installConfig['options'] as $key => $value) {
                    $options[$value['default_value']] = $value['integracommerce_label'];
                }

                $config['option']['values'] = $options;
            }

            /** @var \Mycostum\IntegraCommerce\Helper\Catalog\Product\Attribute $helper */
            $helper = $this->_objectManager
                ->create(\Mycostum\IntegraCommerce\Helper\Customer\Attribute::class);

            /** @var \Magento\Eav\Model\Entity\Attribute $attribute */
            $attribute = $helper->createCustomerAttribute($mapping->getIntegracommerceCode(), (array)$config);

            if (!$attribute || !$attribute->getId()) {
                $this->messageManager->addErrorMessage(__('There was a problem when trying to create the attribute.'));
                return $this->redirectIndex();
            }

            $mapping->setAttributeId((int)$attribute->getId());
        }

        $this->customerAttributeMappingRepository->save($mapping);

        //mapping the select options
        if (isset($installConfig['options'])) {
            $optionsMapping = $this->_customerAttributeMappingOptionsRepository->getOptionsListByMappingId($mappingId);
            foreach ($optionsMapping as $optionMapping) {
                $attributeOptions = $attribute->getSource()->getAllOptions(false);

                foreach ($attributeOptions as $attributeOption) {
                    if ($attributeOption['label'] == $optionMapping->getIntegracommerceLabel()) {
                        $optionMapping->setMagentoValue($attributeOption['value']);
                        $this->_customerAttributeMappingOptionsRepository->save($optionMapping);
                        break;
                    }
                }
            }
        }
        //end

        $message = __(
            'The attribute "%1" was created in Magento and associated to IntegraCommerce attribute "%2" automatically.',
            $attribute->getAttributeCode(),
            $mapping->getIntegracommerceCode()
        );

        $this->messageManager->addSuccessMessage($message);

        return $this->redirectIndex();
    }


    /**
     * @param string $code
     *
     * @return \Magento\Eav\Model\Entity\Attribute|null
     */
    protected function loadCustomerAttribute($code)
    {
        /** @var \Magento\Eav\Model\AttributeRepository $repository */
        $repository = $this->_objectManager->create(\Magento\Eav\Model\AttributeRepository::class);

        try {
            /** @var \Magento\Eav\Model\Entity\Attribute $attribute */
            $attribute = $repository->get(\Magento\Customer\Model\Customer::ENTITY, $code);
        } catch (\Exception $e) {
            return null;
        }

        return $attribute;
    }
}
