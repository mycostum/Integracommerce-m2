<?php

/**
 * BSeller Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright Copyright (c) 2020 B2W Digital - BSeller Platform. (http://www.bseller.com.br)
 *
 * Access https://ajuda.integracommerce.com.br/hc/pt-br/requests/new for questions and other requests.
 */

namespace Mycostum\IntegraCommerce\Block\Adminhtml\Sales\Order\Shipment\Marketplace;

use Magento\Config\Block\System\Config\Form\Field\FieldArray\AbstractFieldArray;
use Mycostum\IntegraCommerce\Model\Source\Order\Marketplaces;
use Magento\Backend\Block\Template\Context;
use Mycostum\IntegraCommerce\Block\Adminhtml\Sales\Order\Shipment\Marketplace\Field\Channel as FieldChannel;
use \Magento\Framework\DataObject;

class Channel extends AbstractFieldArray
{
    /** @var string */
    protected $render;

    /** @var Marketplaces */
    private $marketplaces;

    /**
     * Channel Constructor
     *
     * @param Context $context
     * @param Marketplaces $marketplaces
     * @param array $data
     */
    public function __construct(Context $context, Marketplaces $marketplaces, array $data = [])
    {
        parent::__construct($context, $data);
        $this->marketplaces = $marketplaces;
    }

    /**
     * Prepare to render
     *
     * @return void
     */
    protected function _prepareToRender()
    {
        $this->addColumn(
            'channel',
            [
                'label'    => __('Channel'),
                'class'    => 'required-entry',
                'renderer' => $this->getRendererChannels()
            ]
        );

        $this->addColumn(
            'method_shipping_default',
            [
                'label'    => __('Method Shipping Default'),
                'class'    => 'input-text required-entry'
            ]
        );
    }

     /**
     * Return renderer by type
     *
     * @return array
     */
    protected function getRendererChannels()
    {
        if (!$this->render) {
            $options = $this->getChannels();
            $this->render = $this->getLayout()
                ->createBlock(FieldChannel::class)
                ->setIsRenderToJsTemplate(true)
                ->setOptions($options);
        }

        return $this->render;
    }

    /**
     * @return array
     */
    protected function getChannels(): array
    {
        return $this->marketplaces->toOptionArray();
    }

    /**
     * Prepare row and set option selected
     *
     * @param DataObject $row
     * @return void
     */
    protected function _prepareArrayRow(DataObject $row)
    {
        $channelHash = $this->getRendererChannels()->calcOptionHash($row->getData('channel'));
        $option = ['option_' . $channelHash => 'selected="selected"'];
        $row->setData('option_extra_attrs', $option);
    }
}
