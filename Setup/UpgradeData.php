<?php
/**
 * IntegraCommerce Platform | B2W - Companhia Digital
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  IntegraCommerce
 * @package   Mycostum_IntegraCommerce
 *
 * @copyright Copyright (c) 2018 B2W Digital - IntegraCommerce Platform.
 *
 * Access https://ajuda.integracommerce.com.br/hc/pt-br/requests/new for questions and other requests.
 */

namespace Mycostum\IntegraCommerce\Setup;

use Mycostum\IntegraCommerce\Functions;
use Mycostum\IntegraCommerce\Model\Customer\Attributes\Mapping;
use Magento\Framework\Setup\ModuleContextInterface;
use Magento\Framework\Setup\ModuleDataSetupInterface;
use Magento\Framework\Setup\UpgradeDataInterface;
use Mycostum\IntegraCommerce\Model\Config\IntegracommerceAttributes\Data as IntegracommerceConfigData;
use Magento\Eav\Model\ResourceModel\Entity\AttributeFactory;

/**
 * Upgrade Data script
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
 */
class UpgradeData implements UpgradeDataInterface
{
    use Functions, Setup;

    /**
     * EAV setup factory
     *
     * @var \Magento\Eav\Setup\EavSetupFactory
     */
    private $eavSetupFactory;

    /** @var IntegracommerceConfigData */
    protected $integracommerceConfigData;

    /** @var AttributeFactory */
    protected $attributeFactory;

    /**
     * Constructor
     *
     * @param CategorySetupFactory $categorySetupFactory
     * @param \Magento\Eav\Setup\EavSetupFactory $eavSetupFactory
     * @param UpgradeWidgetData $upgradeWidgetData
     * @param UpgradeWebsiteAttributes $upgradeWebsiteAttributes
     */
    public function __construct(
        \Magento\Eav\Setup\EavSetupFactory $eavSetupFactory,
        IntegracommerceConfigData $configData,
        AttributeFactory $attributeFactory
    )
    {
        $this->eavSetupFactory = $eavSetupFactory;
        $this->integracommerceConfigData = $configData;
        $this->attributeFactory = $attributeFactory;
    }

    /**
     * {@inheritdoc}
     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     * @SuppressWarnings(PHPMD.NPathComplexity)
     */
    public function upgrade(ModuleDataSetupInterface $setup, ModuleContextInterface $context)
    {
        if (version_compare($context->getVersion(), '1.0.1') < 0) {
            $this->setup = $setup;
            $this->setup()->startSetup();

            /**
             * Install bseller_integracommerce_customer_attributes_mapping data.
             */
            $this->installCustomerIntegraCommerceRequiredAttributes();

            $this->setup()->endSetup();
        }
    }

    /**
     * Install IntegraCommerce required attributes.
     *
     * @return $this
     */
    protected function installCustomerIntegraCommerceRequiredAttributes()
    {
        $attributes = (array)$this->integracommerceConfigData->getEntityAttributes(\Magento\Customer\Model\Customer::ENTITY);
        $table = (string)$this->getTable('mycostum_integracommerce_customer_attributes_mapping');

        /** @var array $attribute */
        foreach ($attributes as $identifier => $data) {
            $integracommerceCode = $this->arrayExtract($data, 'code');
            $label = $this->arrayExtract($data, 'label');
            $castType = $this->arrayExtract($data, 'cast_type', Mapping::DATA_TYPE_STRING);
            $description = $this->arrayExtract($data, 'description');
            $validation = $this->arrayExtract($data, 'validation');
            $enabled = (bool)$this->arrayExtract($data, 'required', true);
            $required = (bool)$this->arrayExtract($data, 'required', true);
            $editable = (bool)$this->arrayExtract($data, 'editable', true);
            $hasOptions = (bool)$this->arrayExtract($data, 'has_options', false);
            $createdAt = $this->now();

            if (empty($integracommerceCode) || empty($castType)) {
                continue;
            }

            $attributeData = [
                'integracommerce_code' => $integracommerceCode,
                'integracommerce_label' => $label,
                'integracommerce_description' => $description,
                'enabled' => $enabled,
                'cast_type' => $castType,
                'validation' => $validation,
                'required' => $required,
                'editable' => $editable,
                'created_at' => $createdAt,
                'has_options' => $hasOptions
            ];

            $installConfig = (array)$this->arrayExtract($data, 'attribute_install_config', []);
            $magentoCode = $this->arrayExtract($installConfig, 'attribute_code');

            /** @var int $attributeId */
            if ($attributeId = (int)$this->getAttributeIdByCode($magentoCode)) {
                $attributeData['attribute_id'] = $attributeId;
            }

            $this->getConnection()->beginTransaction();

            try {
                /** @var \Magento\Framework\DB\Select $select */
                $select = $this->getConnection()
                    ->select()
                    ->from($table, 'id')
                    ->where('integracommerce_code = :integracommerce_code')
                    ->limit(1);

                $id = $this->getConnection()->fetchOne($select, [':integracommerce_code' => $integracommerceCode]);

                if ($id) {
                    $this->getConnection()->update($table, $attributeData, "id = {$id}");
                    $this->getConnection()->commit();
                    continue;
                }

                $this->getConnection()->insert($table, $attributeData);

                $parentAttributeId = $this->getConnection()->lastInsertId($table);
                $this->getConnection()->commit();

                /*
                 * if the attribute has options
                 */
                if (isset($attributeData['has_options']) && $attributeData['has_options']) {
                    $this->fillOptionsTable($this->arrayExtract($data, 'options', false), $parentAttributeId);
                }

            } catch (\Exception $e) {
                $this->getConnection()->rollBack();
            }
        }

        return $this;
    }

    /**
     * @param $code
     *
     * @return int|null
     */
    protected function getAttributeIdByCode($code)
    {
        $attributeId = null;

        try {
            /** @var \Magento\Eav\Model\ResourceModel\Entity\Attribute $attribute */
            $attribute = $this->attributeFactory->create();
            $attributeId = $attribute->getIdByCode(\Magento\Customer\Model\Customer::ENTITY, $code);
        } catch (\Exception $e) {

        }

        return $attributeId;
    }

    protected function fillOptionsTable($options, $parentAttributeId)
    {
        $table = (string)$this->getTable('mycostum_integracommerce_customer_attributes_mapping_options');

        foreach ($options as $option) {
            try {
                $this->getConnection()->beginTransaction();

                $optionData =
                    [
                        'integracommerce_code' => $this->arrayExtract($option, 'integracommerce_code'),
                        'integracommerce_label' => $this->arrayExtract($option, 'integracommerce_label'),
                        'customer_attributes_mapping_id' => $parentAttributeId
                    ];
                $this->getConnection()->insert($table, $optionData);
                $this->getConnection()->commit();
            } catch (\Exception $e) {
                $this->getConnection()->rollBack();
            }
        }
    }
}

